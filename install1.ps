param($installPath, $toolsPath, $package, $project)
	$appStart = $project.ProjectItems.Item("App_Start")
	try{
	$RouteConfig = $appStart.ProjectItems.Item("RouteConfig.cs")
		if($RouteConfig -eq $null){
			Write-Host "App_start/RouteConfig.cs not found"
			$globalasax = $project.ProjectItems.Item("Global.asax")
			$globalasaxCs = $globalasax.ProjectItems.Item("Global.asax.cs")
			$globalasaxCs.Open()
			$globalasaxCs.Document.Activate()
			$Selection = $globalasaxCs.Document.Selection
			$Selection.StartOfDocument()
			if($Selection.FindText("Application_Start")){
		      $Selection.FindText("{")
		      $Selection.StartOfLine()
			  $Selection.LineDown()
			  $Selection.Insert("`r`n`t`t`tMVCControls.Core.KoVMRouteExts.RegisterJsBundle(RouteTable.Routes);`r`n`")
			 }
		}
	}else{
		$RouteConfig.Open()
		$RouteConfig.Document.Activate()
		$Selection = $globalasaxCs.Document.Selection
		$Selection.StartOfDocument()
		if($Selection.FindText("RegisterRoutes")){
		      $Selection.FindText("{")
		      $Selection.StartOfLine()
			  $Selection.LineDown()
			  $Selection.Insert("`r`n`t`t`tMVCControls.Core.KoVMRouteExts.RegisterJsBundle(routes);`r`n")
			 }	
	}
	catch{
	   Write-Host "App_start/RouteConfig.cs not found"
	}
	try
	{
		$BundleConfig = $appStart.ProjectItems.Item("BundleConfig.cs")
		
		if($BundleConfig -eq $null){
		    Write-Host "App_start/BundleConfig.cs not found"
		}else{
		  Write-Host "Found BundleConfig.cs"
		  $BundleConfig.Open()
		  $BundleConfig.Document.Activate()
		  #$BundleConfig.Document.Selection.SelectAll()
		  $Selection = $BundleConfig.Document.Selection
		  $Selection.StartOfDocument() 
		  if($Selection.FindText("RegisterBundles")){
		      $Selection.FindText("{")
		      $Selection.StartOfLine()
			  $Selection.LineDown()
		      $Selection.Insert("`r`n`t`t`t//knockout files")
		      $Selection.Insert("`r`n`t`t`tbundles.Add(new ScriptBundle(`"~/bundles/knockout`")")
		      $Selection.Insert("`r`n`t`t`t`t`t.Include(`"~/Scripts/knockout-{version}.js`"));")
		      
			  $Selection.Insert("`r`n`t`t`t//core js files")
		      $Selection.Insert("`r`n`t`t`tbundles.Add(new ScriptBundle(`"~/bundles/ExtsCore`")")
		      $Selection.Insert("`r`n`t`t`t`t`t.Include(`"~/Scripts/Core*`"));")
		      
			  $Selection.Insert("`r`n`t`t`t//core css files")
		      $Selection.Insert("`r`n`t`t`tbundles.Add(new StyleBundle(`"~/Content/ExtsCore`").Include(")
		      $Selection.Insert("`r`n`t`t`t`t`t`"~/Content/CoreGrid.css`",") 
		      $Selection.Insert("`r`n`t`t`t`t`t`"~/Content/CoreDialog.css`",") 
		      $Selection.Insert("`r`n`t`t`t`t`t`"~/Content/CoreUIStd.css`"));") 
		      $Selection.NewLine()
		      $Selection.NewLine()
		  } 

		  $BundleConfig.Document.Selection.StartOfDocument()
		  $BundleConfig.Document.Close(0)
		}
	}
	catch{
	   Write-Host "App_start/BundleConfig.cs not found"
	}

	try{
		$Views = $project.ProjectItems.Item("Views")
		$Shared = $Views.ProjectItems.Item("Shared")
		$Layoutcshtml = $Shared.ProjectItems.Item("_Layout.cshtml")
		if($Layoutcshtml -eq $null){
		       Write-Host "Views\Shared\_Layout.cshtml not found"
		}else{
			Write-Host "Found _Layout.cshtml"
			$Layoutcshtml.Open()
			$Layoutcshtml.Document.Activate()
			$Layoutcshtml.Document.Selection.SelectAll()
			$LayoutSelection = $Layoutcshtml.Document.Selection
			$LayoutSelection.StartOfDocument()

			if($LayoutSelection.FindText("~/Content/ExtsCore")){ 
				Write-Host "~/Content/ExtsCore found"
			}else{
				if($LayoutSelection.FindText("</head>")){
					$LayoutSelection.Insert("`r`n`t@Styles.Render(`"~/Content/ExtsCore`")")
					$LayoutSelection.Insert("`r`n</head>")
					$LayoutSelection.Insert("`r`n")	
				}
			}

		  	$jquery = $LayoutSelection.FindText("~/bundles/jquery")
		  	$jqueryui = $LayoutSelection.FindText("~/bundles/jqueryui")
		  	$jqueryval = $LayoutSelection.FindText("~/bundles/jqueryval")
		  	$knockout = $LayoutSelection.FindText("~/bundles/knockout")
		  	$RenderSection = $LayoutSelection.FindText("@RenderSection")

			if(!$RenderSection){
				$body = $LayoutSelection.FindText("</body>")
				$LayoutSelection.StartOfLine()			
			}else{
				$LayoutSelection.StartOfLine()
			}

			if(!$jquery){
				$LayoutSelection.Insert("`t@Scripts.Render(`"~/bundles/jquery`")`r`n")				
			}

			if(!$jqueryui){
				$LayoutSelection.Insert("`t@Scripts.Render(`"~/bundles/jqueryui`")`r`n")				
			}

			if(!$jqueryval){
				$LayoutSelection.Insert("`t@Scripts.Render(`"~/bundles/jqueryval`")`r`n")				
			}

			if(!$knockout){
				$LayoutSelection.Insert("`t@Scripts.Render(`"~/bundles/knockout`")`r`n")				
			}

			if(!$RenderSection ){
				$LayoutSelection.Insert("`t@RenderSection(`"scripts`", required: false)`r`n")				
				$LayoutSelection.Insert("`t@Scripts.Render(`"~/bundles/ExtsCore`")`r`n")				
			}else{
				$LayoutSelection.LineDown()
				$LayoutSelection.Insert("`t@Scripts.Render(`"~/bundles/ExtsCore`")`r`n")				
			}

		  	$Layoutcshtml.Document.Selection.StartOfDocument()
		  	$Layoutcshtml.Document.Close(0)
		}
	}
	catch{
	   Write-Host "Views\Shared\_Layout.cshtml not found"
	}

	try{
		$CodeTemplates = $project.ProjectItems.Item("CodeTemplates")
		$AddView = $CodeTemplates.ProjectItems.Item("AddView")
		$CSHTML = $AddView.ProjectItems.Item("CSHTML")
		$KnockoutView = $CSHTML.ProjectItems.Item("KnockoutView.tt")
		$KnockoutView.Properties.Item("CustomTool").Value = $null
		$CreateOrEditView = $CSHTML.ProjectItems.Item("_CreateOrEdit.tt")
		$CreateOrEditView.Properties.Item("CustomTool").Value = $null
	}
	catch{
	   Write-Host "CodeTemplates\AddView\CSHTML\KnockoutView.tt not found"
	}
