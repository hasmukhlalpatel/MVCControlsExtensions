<#@ template language="C#" debug="true" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#
MvcTextTemplateHost mvcHost = MvcTemplateHost;
#>
@model <#= mvcHost.ViewDataTypeName #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
if(mvcHost.IsPartialView) {
#>

<#
} else if(mvcHost.IsContentPage) {
#>

@{
	ViewBag.Title = "<#= mvcHost.ViewName#>";
<#
if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {
#>
	Layout = "<#= mvcHost.MasterPageFile#>";
<#
}
#>
}

<h2><#= mvcHost.ViewName#></h2>

<#
} else {
#>

@{
	Layout = null;
}

<!DOCTYPE html>

<html>
<head>
	<meta name="viewport" content="width=device-width" />
	<title><#= mvcHost.ViewName #></title>
</head>
<body>
<#
	PushIndent("    ");
}
#>
<#
if (mvcHost.ReferenceScriptLibraries) {
#>
<#
	if (!mvcHost.IsContentPage) {
#>
<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
	}
}
#>
<div id='divRoot'>
@using (Html.BeginForm()) {
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true)

	<fieldset class="border">
		<legend class="border"><#= mvcHost.ViewDataType.Name #></legend>

<#
foreach (ModelProperty property in GetEligibleProperties(mvcHost.ViewDataType)) {
#>
		<div class="editor-label">
			@Html.LabelFor(model => model.<#= property.Name #>)
		</div>
		<div class="editor-field">
<#
        if (property.IsList){
#>			@Html.GridFor(model => model.<#= property.Name #>,
<#
            foreach (var gridProperty in GetEligibleProperties(property.UnderlyingType))
            {
               if (gridProperty.IsEnum){
#>			        col=>col.AddDropDownColumnFor(item=>item.<#= gridProperty.Name #>)<#     
                }else if (gridProperty.UnderlyingType == typeof (DateTime)){
#>			        col=>col.AddDateTextColumnFor(item=>item.<#= gridProperty.Name #>)<#     
                } else if (gridProperty.UnderlyingType == typeof(bool)){
#>			        col=>col.AddCheckBoxColumnFor(item=>item.<#= gridProperty.Name #>)<#     
                } else if (!gridProperty.IsUnknown){
#>			        col=>col.AddTextColumnFor(item=>item.<#= gridProperty.Name #>)<#     
                } else{
#>			        col=>col.AddColumnFor(item=>item.<#= gridProperty.Name #>)<#                                 
                }
#>,
<#
            }
#>                 col => col.AddDeleteButtonColumn("Remove", true, "Add", new { onclick = "DeleteRow(this)" }, new { onclick = "AddNewRow(this)" })<#
            #>)<# 
        } else if (property.IsEnum){
#>			@Html.DropDownListFor(model => model.<#= property.Name #>)<#                    
        } else if (property.IsClass){
#>			@Html.PartialFor(model=>model.<#= property.Name #>,"_<#=property.UnderlyingType.Name #>")<#                    
        } else if (property.UnderlyingType == typeof(DateTime)){
#>			@Html.DateTextBoxFor(model => model.<#= property.Name #>)<#
        } else if (property.UnderlyingType == typeof(bool)){
#>			@Html.CheckBoxFor(model => model.<#= property.Name #>)<#
        } else if (!property.IsUnknown) {
#>			@Html.TextBoxFor(model => model.<#= property.Name #>)<#
        } else {
#>			@Html.EditorFor(model => model.<#= property.Name #>)<#                
        }

#>

			@Html.ValidationMessageFor(model => model.<#= property.Name #>)
		</div>
<#
}
#>
		<p>
			<input type="button" value="Save" onclick="save<#= mvcHost.ViewName #>()" />
		</p>
	</fieldset>
}
</div>

<#
if(mvcHost.IsContentPage && mvcHost.ReferenceScriptLibraries) {
#>


@section Scripts {
@* uncomment or put in _Layout.cshtml file before @RenderSection("scripts", required: false) if missing from _Layout
    @Scripts.Render("~/bundles/jquery")
	@Scripts.Render("~/bundles/jqueryui")
	@Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/knockout") *@

	<script type="text/javascript">

	</script>

@* uncomment or put in _Layout.cshtml file after  @RenderSection("scripts", required: false) if missing from _Layout
    @Scripts.Render("~/bundles/ExtsCore") *@

}
<#
}
#>
<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
	ClearIndent();
#>
</body>
</html>
<#
}
#>
<#+
// Describes the information about a property on the model
class ModelProperty
{
	public string Name { get; set; }
	public string AssociationName { get; set; }
	public string ValueExpression { get; set; }
	public string ModelValueExpression { get; set; }
	public string ItemValueExpression { get; set; }
	public Type UnderlyingType { get; set; }
	public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
	public bool Scaffold { get; set; }
    public bool IsClass { get; set; }
    public bool IsList { get; set; }
    public bool IsUnknown { get; set; }
    public bool IsEnum { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
	typeof(string),
	typeof(decimal),
	typeof(Guid),
	typeof(DateTime),
	typeof(DateTimeOffset),
	typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
	List<ModelProperty> results = GetEligibleProperties(type);
	
	foreach (ModelProperty prop in results) {
		if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
			prop.ModelValueExpression = "String.Format(\"{0:F}\", " + prop.ModelValueExpression + ")";
		}
		else if (prop.UnderlyingType == typeof(DateTime)) {
			prop.ModelValueExpression = "String.Format(\"{0:g}\", " + prop.ModelValueExpression + ")";
		}
	}

	return results;
}

// Call this to determine if property has scaffolding enabled
bool Scaffold(PropertyInfo property) {
	foreach (object attribute in property.GetCustomAttributes(true)) {
		var scaffoldColumn = attribute as ScaffoldColumnAttribute;
		if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {
			return false;
		}
	}
	return true;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
	if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
		return true;
	}

	if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
		return true;
	}

	foreach (object attribute in property.GetCustomAttributes(true)) {
		if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
			return true;
		}
		
		var edmScalar = attribute as EdmScalarPropertyAttribute;
		if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
			return true;
		}
 
		var column = attribute as ColumnAttribute;
		if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
			return true;
		}
	}
	
	return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
	IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
	return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
	return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Call this to determine if the property represents a foreign key.
bool IsForeignKey(PropertyInfo property) {
	return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpressionSuffix(PropertyInfo property) {
	RelatedModel propertyModel;
	MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

	return propertyModel != null ? propertyModel.PropertyName + "." + propertyModel.DisplayPropertyName : property.Name;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyInfo property) {
	RelatedModel propertyModel;
	MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

	return propertyModel != null ? propertyModel.PropertyName : property.Name;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type)
{
    var results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance))
    {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;

        string valueExpression = GetValueExpressionSuffix(prop);

        var modelProperty = new ModelProperty
            {
                Name = prop.Name,
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsReadOnly = prop.GetSetMethod() == null,
                        
            };
        results.Add(modelProperty);

        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType))
        {
            modelProperty.IsPrimaryKey = IsPrimaryKey(prop);
            modelProperty.IsForeignKey = IsForeignKey(prop);
            modelProperty.IsForeignKey = IsForeignKey(prop);
            modelProperty.Scaffold = Scaffold(prop);
        }
        else if (typeof (IEnumerable).IsAssignableFrom(underlyingType) && underlyingType.IsGenericType)
        {
            modelProperty.IsList = true;
            modelProperty.UnderlyingType = underlyingType.GenericTypeArguments[0];
        }
        else if (underlyingType.IsClass)
        {
            modelProperty.IsClass = true;
        }
        else
        {
            modelProperty.IsUnknown = true;
        }
    }

    return results;
}

// Helper
List<ModelProperty> GetGridEligibleProperties(Type type)
{
	var results = new List<ModelProperty>();
	        
    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance))
    {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        string valueExpression = GetValueExpressionSuffix(prop);

        var modelProperty = new ModelProperty
            {
                Name = prop.Name,
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsForeignKey = IsForeignKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
                Scaffold = Scaffold(prop),
                IsUnknown = !IsBindableType(underlyingType)
            };

        results.Add(modelProperty);
    }

    return results;
}

string GetViewModelName(string name){
        return name.Replace("ViewModel", "");
}

// Helper
bool IsBindableType(Type type) {
	return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

MvcTextTemplateHost MvcTemplateHost {
	get {
		return (MvcTextTemplateHost)Host;
	}
}
#>